import lombok.extern.slf4j.Slf4j;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.locks.InterProcessMutex;
import org.apache.curator.framework.recipes.locks.InterProcessSemaphoreMutex;
import org.apache.curator.retry.ExponentialBackoffRetry;

import java.util.concurrent.TimeUnit;

/**
 * @author daniel 2019-4-11 0011.
 */
@Slf4j
public class DistributedLockEnv {
    /**
     * ZK锁前缀
     */
    private static final String BANK_FINANCE_LOCK_PATH_PREFIX="/BankFinance.lock/";
    private static String PATH_SEPARATOR = "/";

    /**
     * 获取zk锁路径
     * @param userId 用户
     * @param key 锁值
     * @return
     */
    public static String buildLockPath(Long userId, String key) {
        return  BANK_FINANCE_LOCK_PATH_PREFIX
                + userId + PATH_SEPARATOR
                + key;
    }

    /**
     * 默认锁定最长时间
     */
    private static final long DEFAULT_TIMEOUT = 10;


    /**
     * zookeeper地址列表，如："10.130.80.99:2181,10.130.80.118:2181,10.130.80.119:2181"
     * 多个服务器之间用英文逗号隔开
     */
    private String zkCluster;

    private CuratorFramework client;

    public DistributedLockEnv(String zkCluster) {
        this.zkCluster = zkCluster;

        initDistributedLockEnv();
    }

    /**
     * 初始化分布式锁环境
     */
    private void initDistributedLockEnv() {
        //创建zookeeper的客户端
        log.info("尝试初始化分布式锁环境，zkCluster={}...", zkCluster);
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(zkCluster, retryPolicy);
        client.start();
        log.info("分布式锁环境初始化完毕");
    }

    public CuratorFramework getClient() {
        return client;
    }

    /**
     * 获取可重入锁
     * @param path 锁路径
     * @return
     */
    public InterProcessMutex getMutex(String path) {
        return new InterProcessMutex(client, path);
    }

    /**
     * 获取不可重入锁
     * @param path 锁路径
     * @return
     */
    public InterProcessSemaphoreMutex getSemaphoreMutex(String path) {
        return new InterProcessSemaphoreMutex(client, path);
    }

    public boolean acquirePermanentLock(String path, long time, TimeUnit unit) {
        InterProcessMutex mutex = getMutex(path);
        try {
            // 尝试去获取分布式锁（此操作为阻塞操作），设置了获取锁的最长等待时间
            return mutex.acquire(time, unit);
        } catch (Exception e) {
            log.error("与zk通讯有问题，请检查！", e);
        }
        return false;
    }

    /**
     * 用不可重入锁执行
     * @param lockPath 锁路径
     * @param command 要执行的代码块
     */
    public Object executeWithSemaphoreMutex(String lockPath, Command command) {
        InterProcessSemaphoreMutex mutex = getSemaphoreMutex(lockPath);
        Object obj=null;
        try {
            log.info("尝试获取zk分布式锁, lockPath={}", lockPath);
            mutex.acquire(DEFAULT_TIMEOUT, TimeUnit.SECONDS);
            log.info("获取到zk分布式锁，开始执行任务, lockPath={}", lockPath);
            obj= command.execute( );
            log.info("获取到zk分布式锁，执行完任务, lockPath={}", lockPath);
        } catch (Throwable t) {
            throw new RuntimeException("执行异常", t);
        } finally {
            try {
                log.info("执行任务完毕，尝试释放zk分布式锁, lockPath={}", lockPath);
                mutex.release();
                log.info("释放zk分布式锁成功, lockPath={}", lockPath);
            } catch (Exception e) {
                log.error("释放分布式锁 {} 发生异常！", lockPath, e);
            }
        }
        return obj;
    }

    /**
     * 用可重入锁执行
     * @param lockPath 锁路径
     * @param command 要执行的代码块
     */
    public void executeWithMutex(String lockPath, Command command) {
        InterProcessMutex mutex = getMutex(lockPath);
        try {
            log.info("尝试获取zk分布式锁（可重入锁）, lockPath={}", lockPath);
            mutex.acquire();
            log.info("获取到zk分布式锁（可重入锁），开始执行任务, lockPath={}", lockPath);
            command.execute();
        } catch (Throwable t) {
            throw new RuntimeException("执行异常", t);
        } finally {
            try {
                log.info("执行任务完毕，尝试释放zk分布式锁（可重入锁）, lockPath={}", lockPath);
                mutex.release();
                log.info("释放zk分布式锁成功（可重入锁）, lockPath={}", lockPath);
            } catch (Exception e) {
                log.error("释放分布式锁 {}（可重入锁） 发生异常！", lockPath, e);
            }
        }
    }

}













///////////////////


调用

	UserAssetTotalVo test = (UserAssetTotalVo) distributedLockEnv.executeWithSemaphoreMutex(DistributedLockEnv.buildLockPath(userId, MemberUtil.REDIS_KEY_MEMBER_TOTAL), new Command() {
			@Override
			public Object execute() throws Throwable {
				return (Object) queryUserAsset(userId);
			}
		});





	<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zookeeper-config</artifactId>
		</dependency>

















